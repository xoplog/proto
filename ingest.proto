
syntax = "proto3";

option go_package = "github.com/xoplog/xop-go/xopproto";

// Within a sourceNamespace+sourceVersion, all attributes of the same name
// must have the same defintions.

message Source {
	string sourceNamespace = 1;
	string sourceNamespaceVersion = 2;
	string sourceID = 3;
	int64 sourceStartTime = 4;
	bytes sourceRandom = 5;
	bool canThrottle = 6; // true for aggregators that have local storage
}

enum Encoding {
	UnknownEncoding = 0;
	XopProtobuf = 1;
}

message IngestFragment {
	Source source = 1;
	Encoding encoding = 2;
	uint32 endodingVersion = 3;
	fixed64 sequenceNumber = 4;
	repeated Trace traces = 5;
	int64 receivedAt = 6;
	repeated AttributeDefinition attributeDefinitions = 7;
	repeated EnumDefinition enumDefinitions = 8;
}

message Trace {
	bytes TraceID = 1;
	repeated Request requests = 2;
}

message Request {
	bytes requestID = 1;
	optional bytes parentTraceID = 2;
	bytes parentSpanID = 3;
	int32 priorLinesInRequest = 4;
	repeated Span spans = 5; 
	repeated Line lines = 6; // not included in spans because we want to preserve the exact ordering
	int32 errorCount = 7;
	int32 alertCount = 8;
	sfixed64 startTime = 9; // duplicates in in the request span
}

message Line {
	bytes spanID = 1;
	int32 logLevel = 2;
	sfixed64 timestamp = 3;
	bytes jsonData = 4; 
}

message Span {
	bytes SpanID = 3;
	bytes ParentID = 4;
	bytes jsonData = 5;
	sfixed64 startTime = 6;
	optional sfixed64 endTime = 7;
	optional bytes baggage = 8; // only populated if isRequest is true and there is data
	optional bytes traceState = 9; // only populated if isRequest is true and there is data
	int32 version = 10;
	bool isRequest = 11;
}

message AttributeDefinition {
	string key = 1;
	string description = 2;
	string namespace = 3;
	string namespaceSemver = 4;
	AttributeType type = 5;
	bool shouldIndex = 6;
	int32 prominence = 7;
	bool locked = 8;
	bool distinct = 9;
	bool multiple = 10;
}

// comes from ZZZAttribute
enum AttributeType {
	Unknown = 0;
	Bool = 1;
	Float64 = 2;
	Float32 = 3;
	Int64 = 4;
	Int32 = 5;
	Int16 = 6;
	Int8 = 7;
	Int = 8;
	String = 9;
	Link = 10;
	Any = 11;
	Time = 12;
	Duration = 13;
	Enum = 14;
}

message EnumDefinition {
	string attributeKey = 1;
	string namespace = 2;
	string namespaceSemver = 3;
	string string = 4;
	int64 intValue = 5;
}

message AttributeReferenced {
	bytes TraceID = 1;
	string attributeKey = 2;
	string namespace = 3;
	string namespaceSemver = 4;
}

message Error {
	string text = 1;
}

message ReadyToStream {
	fixed64 streamID = 1;
}

message Empty {}

service Ingest {
	rpc Ping(Empty) returns (Empty) {}
	rpc UploadFragment(IngestFragment) returns (Error) {}
}
