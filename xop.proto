syntax = "proto3";

package xop;

option go_package = "github.com/xoplog/xop-go/xopproto";

message Sender {
	int64 senderStartTime = 5;
	bytes senderRandom = 6;
	bool canThrottle = 7; // true for aggregators that have local storage
	int32 protoVersion = 8;
}

message IngestFragment {
	Sender sender = 1;
	Encoding encoding = 2;
	uint32 endodingVersion = 3;
	uint32 sequenceNumber = 4;
	repeated Trace traces = 5;
	int64 receivedAt = 6;
	// XXX repeated EnumDefinition enumDefinitions = 8;
}

message Trace {
	bytes TraceID = 1;
	repeated Request requests = 2;
}

message Request {
	bytes requestID = 1;
	optional bytes parentTraceID = 2;
	int32 priorLinesInRequest = 3;
	repeated Span spans = 4; // first span is always the request span
	repeated Line lines = 5; // not included in spans because we want to preserve the exact ordering
	int32 errorCount = 6;
	int32 alertCount = 7;
	string sourceNamespace = 8;
	string sourceNamespaceVersion = 9;
	string sourceID = 10;
	string sourceVersion = 11;
	repeated AttributeDefinition attributeDefinitions = 12; // always includes full set, even if request is sent multiple times // XXX fill
}

message Span {
	bytes spanID = 3;
	bytes parentID = 4;
	repeated SpanAttribute attributes = 5;
	sfixed64 startTime = 6;
	optional sfixed64 endTime = 7;
	string baggage = 8; // only populated if isRequest is true and there is data
	string traceState = 9; // only populated if isRequest is true and there is data
	int32 version = 10;
	bool isRequest = 11; // somewhat redundant
	string name = 12;
	string sequenceCode = 13;
}

message Line {
	bytes spanID = 1;
	int32 logLevel = 2;
	sfixed64 timestamp = 3;
	repeated Attribute attributes = 4;
	optional string messageFormat = 5;
	string message = 6;
	string messageTemplate = 7;
	LineKind lineKind = 8;
	string link = 9; // custom type?
	optional Model model = 10;
}

message Model {
	string type = 1;
	bytes json = 2;
	string error = 3;
}


message SpanAttribute {
	uint32 attributeDefinitionSequenceNumber = 1;
	repeated AttributeValue values = 2; // at least one is required
}

message Attribute {
	string key = 1;
	AttributeType type = 2;
	AttributeValue value = 3;
}

message AttributeValue {
	string stringValue = 2;
	sint64 intValue = 3; 
	uint64 uintValue = 4;
	double floatValue = 5;
	bytes bytesValue = 6;
}

message AttributeDefinition {
	string key = 1;
	string description = 2;
	string namespace = 3;
	string namespaceSemver = 4;
	AttributeType type = 5;
	bool shouldIndex = 6;
	int32 prominence = 7;
	bool locked = 8;
	bool distinct = 9;
	bool multiple = 10;
}

enum LineKind {
	KindLine = 0;
	KindModel = 1;
	KindLink = 2;
}

// comes from ZZZAttribute
enum AttributeType {
	Unknown = 0;
	Bool = 1; // value is in intValue, 0 = false, 1 = true
	Float64 = 2;
	Float32 = 3;
	Int64 = 4;
	Int32 = 5;
	Int16 = 6;
	Int8 = 7;
	Int = 8;
	String = 9;
	Link = 10; // value is in stringValue
	Any = 11; // value is in bytesValue, JSON encoded, type is in stringValue
	Time = 12; // value is in intValue, UnixNano.
	Duration = 13; // value is in intValue, nanoseconds
	Enum = 14; // int is in intValue, string is in stringValue
	// These are not included in ZZZAttribute, but are included in line attributes (AllData)
	Uint64 = 100;
	Uint32 = 101;
	Uint16 = 102;
	Uint8 = 103;
	Uint = 104;
	Uintptr = 105;
	Stringer = 106; // value is in stringValue
}

message EnumDefinition {
	string attributeKey = 1;
	string namespace = 2;
	string namespaceSemver = 3;
	string string = 4;
	int64 intValue = 5;
}

// Within a sourceNamespace+sourceVersion, all attributes of the same name
// must have the same defintions.

enum Encoding {
	UnknownEncoding = 0;
	JSONInProto = 1;
	Proto = 2;
}

message Error {
	string text = 1;
}

message ReadyToStream {
	fixed64 streamID = 1;
}

message Empty {}

service Ingest {
	rpc Ping(Empty) returns (Empty) {}
	rpc UploadFragment(IngestFragment) returns (Error) {}
}
